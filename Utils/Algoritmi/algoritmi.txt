//CERCA PAROLA
//Cerca una parola nelle righe del file, se trova la parola restituisce 1 , se non la 
//trova restituisce 0, se il file non esiste restituisce -1

            
typedef struct{
    char nomeFile[LENGTH];
    char parola[LENGTH];
}request;

request req;
int result, count;
int fd;
char read_char, buff[LENGTH];


fd = open(req.nomeFile, O_RDONLY);
result = 0;
            
if(fd < 0){
	result = -1;
}else{
	count = 0;
        while((nread = read(fd, &read_char, 1)) != 0){
        	if( nread < 0){
                	result = -1;
                        break;
                }else{
                        if(read_char == ' ' || read_char == '\r' || read_char == '\n'){
                            buff[count] = '\0';
                            if(!strcmp(buff , req.parola)){
                                result = 1;
                                break;
                            }
                            count = 0;
                        }else{
                            buff[count] = read_char;
                            count ++;
                        }
                    }
                }
                close(fd);
            }

            buff[count] = '\0';

            if(!strcmp(buff , req.parola)) result = 1;

            

//-------------------------------------------------------------------------------------
//CERCA PAROLA INVIA RIGA
//Cerca la parola nella riga, se c'Ã¨ invia la riga, usa \n per separare le righe e \0 
//per segnalare la fine dell'invio


fd = open(req.nomeFile, O_RDONLY);
if(fd<0){
	riga[0] = '\0';
        write(fd, riga, 1);
}

count = 0;

while((nread = read(fd, buff, sizeof(buff))) > 0){
	
	for(i=0; i<nread; i++){
	
		if(buff[i] == '\n'){
			riga[count] = '\0';
			if(strstr(riga, req.parola) != NULL){
				riga[count] = '\n';
				write(conn_sd, riga, count+1);
			}
                        count =0;
                }else{
			riga[count] = buff[i];
			count ++;
                }
	}
  }

riga[count] = '\0';

if(strstr(riga, req.parola) != NULL){
	riga[count] = '\n';
	write(conn_sd, riga, count+1);
}

riga[0] = '\0';
write(fd, riga, 1);


//-------------------------------------------------------------------------------------
//CONTA IN UN FILE
//Conta il numero di righe, il numero di parole e il numero di caratteri in un file

int fd = open( fileName, O_RDONLY);

    int car=0;
    int parole =0;
    int lin =0;

    char read_char;
    int nread;

    while((nread= read(fd, &read_char, 1))){
        if(nread<0){int count=0;
            perror("Erroe lettura file!");
        }

        if(read_char == ' ') parole ++;
        else if(read_char == '\n'){
            lin++;
            parole++;
        } 
        else car++;
    }

//-------------------------------------------------------------------------------------
//CERCA LA PAROLA PIU LUNGA
//Cerca la parola piu lunga in un file e va restituire la sua dimensione

//Variabili per l'esecuzione
int charCount, currCharCount, fd, nread;
char read_char;
//Fine variabili


charCount = -1;
if ((fd = open(nomeFile, O_RDONLY)) < 0) {
    perror("open file sorgente");
} else {
    /* ************************************** */
    // Operazione di conteggio delle parole (in linea)
    currCharCount = 0;
    while ((nread = read(fd, &read_char, sizeof(char))) != 0) {
        if (nread < 0) {
            sprintf(err, "(PID %d) impossibile leggere dal file", getpid());
            perror(err);
            exit(0);
        } else {
            if (read_char == ' ' || read_char == '\r' || read_char == '\n')
            { 
                if (currCharCount > charCount) {
                    charCount = currCharCount;
                }
                currCharCount = 0;
            } else { // carattere
                currCharCount++;
            }
        }
    }
    /* ************************************** */
    // Chiudo il file descriptor
    close(fd);
}


//-------------------------------------------------------------------------------------
//ELIMINA RIGA
//Invia tutte le righe di un file, pero non invia la n-esima riga

//Parte invio

//Variabili per l'esecuzione
int lineCount, nread;
char ccar;
//Fine variabili per l'esecuzione

lineCount = 1;
while ((nread = read(conn_sd, &ccar, sizeof(char))) > 0) {
    if (ccar == '\n') { // finita una linea
        if (lineCount != line)
        {
            write(conn_sd, &ccar, 1);
        }
        lineCount = lineCount + 1;
        }else {
            if (lineCount != line) { // non trasmetto la linea richiesta
                write(conn_sd, &ccar, 1);
            }
        }
}

//Parte ricezione

//Variabili per l'esecuzione
char buff[DIM_BUFF];
//Fine variabili per l'esecuzione

printf("Client: ricevo e stampo file senza la linea\n");
while ((nread = read(sd, buff, DIM_BUFF)) > 0) {
    write(fd_dest, buff, nread);
    write(1, buff, nread);
}

//Variabili per l'esecuzione
//Fine variabili per l'esecuzione

//-------------------------------------------------------------------------------------
//ELIMINA CIFRE DA FILE
//Elimina le cifre da un file, con l'aiuto di un file temp, poi va a rinominare
//il file

    static int result;

    int fd = open(nomeFile->nome, O_RDONLY);
    int temp = open("temp.txt", O_WRONLY | O_CREAT, 0777);

    char read_char;
    int nread;

    if(!fd || !temp){
        result = -1;
        return(&result);
    }

    result =0;

    while((nread= read(fd, &read_char, 1))){
        if(nread<0){
            perror("Erroe lettura file!");
            result = -1; 
            return(&result);
        }

        if(read_char <= '9' && read_char>='0'){
            result ++;
        }else{
            nread = write(temp, &read_char, 1);
            if(nread < 0 ){
                perror("Erroe scritura file!");
                result = -1; 
                return(&result);
            }
        }
    }

    close(fd);
    close(temp);

    rename("temp.txt", nomeFile->nome);

    printf("Eliminazioni: %d\n", result);

    return(&result);

//-----------------------------------------------------------------------------
//SELEZIONE FILE DI TESTO
//Va a selezionare solo i file di testo dentro la cartella nomeDir, per count e
//array di file ho usato una strcut

    static Res result;

    DIR  *d;
    struct dirent *dir;
    struct stat fileStat;

    d = opendir(nomeDir->nome);

    if(d) {

        result.count = 0;

        while((dir= readdir(d)) != NULL){
            printf("Trovato file:%s\n", dir->d_name);
            if(dir->d_type!= DT_DIR){
                //if(stat(dir->d_name, &fileStat)==0){
                    if(strstr(dir->d_name, ".txt")!=NULL){
                        printf("Trovato file di testo:%s\n", dir->d_name);
                        strcpy(result.nomi[result.count].nome, dir->d_name);
                        result.count ++;
                        if(result.count == 6) break;
                    }
                    
                //}
            }
        }
    }else{
        result.count = -1;
    }

    return(&result);

//-----------------------------------------------------------------------------